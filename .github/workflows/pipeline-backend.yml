name: BSN Backend API Pipeline

on:
    push:
        branches:
            - ci/pipeline
        paths:
            - book-network/**
            - docker/backend/**
            - 'docker-compose.yml'
            - .github/workflows/*-backend.yml

jobs:
    compile:
        runs-on: ubuntu-latest
        name: Compile project
        steps:
            -   name: Checkout code
                uses: actions/checkout@v4
                with:
                    fetch-depth: 0

            -   name: Setup JDK
                uses: actions/setup-java@v4
                with:
                    java-version: '17'
                    distribution: 'adopt'

            -   name: Compile project
                run: |
                    cd book-network
                    ./mvnw clean compile

    unit-tests:
        runs-on: ubuntu-latest
        name: Unit tests
        steps:
            -   name: Checkout code
                uses: actions/checkout@v4
                with:
                    fetch-depth: 0

            -   name: Setup JDK
                uses: actions/setup-java@v4
                with:
                    java-version: '17'
                    distribution: 'adopt'

            -   name: Running Unit Tests
                run: |
                    cd book-network
                    ./mvnw clean test

    build:
        runs-on: ubuntu-latest
        name: Build backend
        needs: [ compile, unit-tests ]
        steps:
            -   name: Checkout code
                uses: actions/checkout@v4
                with:
                    fetch-depth: 0

            -   name: Setup JDK
                uses: actions/setup-java@v4
                with:
                    java-version: '17'
                    distribution: 'adopt'

            -   name: Build project
                run: |
                    cd book-network
                    ./mvnw clean package

    build-image:
        name: Build Backend Docker image
        runs-on: ubuntu-latest
        needs: [ build ]
        steps:
            -   name: Checkout code
                uses: actions/checkout@v4
                with:
                    fetch-depth: 0

            -   name: Setup JDK
                uses: actions/setup-java@v4
                with:
                    java-version: '17'
                    distribution: 'adopt'

            -   name: Build project
                run: |
                    cd book-network
                    ./mvnw clean package

            -   name: Extract project version
                id: extract_version
                run: |
                    cd book-network
                    echo "VERSION=$(./mvnw -q -Dexec.executable='echo' -Dexec.args='${project.version}' --non-recursive exec:exec)" >> $GITHUB_OUTPUT

            -   name: Login to DockerHub
                uses: docker/login-action@v3
                with:
                    username: ${{ secrets.DOCKERHUB_USERNAME }}
                    password: ${{ secrets.DOCKERHUB_TOKEN }}

            -   name: Build & Push to DockerHub
                uses: docker/build-push-action@v5
                with:
                    context: book-network
                    file: docker/backend/Dockerfile
                    push: true
                    platforms: linux/amd64
                    tags: ${{ secrets.DOCKERHUB_USERNAME }}/bsn-api:${{ steps.extract_version.outputs.VERSION }},${{ secrets.DOCKERHUB_USERNAME }}/bsn-api:latest
                    build-args: |
                        PROFILE=dev
                        APP_VERSION=${{ steps.extract_version.outputs.VERSION }}

    deploy:
        name: Deploy Backend
        runs-on: ubuntu-latest
        needs: [ build-image ]
        steps:
            -   name: Checkout code
                uses: actions/checkout@v4
                with:
                    fetch-depth: 0

            -   name: Create deployment folder
                run: mkdir -p ci-cd

            -   name: Copy docker-compose file
                run: cp docker-compose.yml ci-cd/docker-compose.yml

            -   name: Get runner IP address
                run: echo "ALLOWED_ORIGIN=$(curl -s ifconfig.me)" >> $GITHUB_ENV

            -   name: Set ENV variable and deploy
                env:
                    ALLOWED_ORIGIN: ${{ env.ALLOWED_ORIGIN }}
                    EMAIL_HOST_NAME: ${{ secrets.EMAIL_HOST_NAME }}
                    EMAIL_USER_NAME: ${{ secrets.EMAIL_USER_NAME }}
                    EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
                run: |
                    cd ci-cd
                    docker-compose -f docker-compose.yml pull -q
                    docker-compose -f docker-compose.yml up -d